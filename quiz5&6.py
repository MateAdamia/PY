# -*- coding: utf-8 -*-
"""QUIZ5&6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19sXGscjpvzlkj4sGvpV2xrdGaP1qZkjC

**Quiz 5 & 6**
"""

import pandas as pd
import warnings
import numpy as np
from scipy.stats import norm
warnings.filterwarnings("ignore")

from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
data = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Earthquakes_database.csv')
data.head()

"""# მონაცემების მსგავსი კლასებად დაგხვემარება შემდგომ რომ კლასიფიკაციის მოდელი მარტივად ავაწყოთ."""

data['magnitude_classes'] = pd.cut(data['Magnitude'],
                                    bins=[3, 3.9, 4.9, 5.9, 6.9, 7.9, float('inf')],
                                    labels=['minor', 'light', 'moderate', 'strong', 'major', 'great'])

data



"""ხაზოვანი რეგრესიის მოდელი მომზადებულია გეოგრაფიულ კოორდინატებს (გრძედისა და განედის) და მიწისძვრების სიდიდეს შორის კავშირის შესასწავლად.

"""

from sklearn.linear_model import LinearRegression

from sklearn.impute import SimpleImputer

features = ['Latitude', 'Longitude', ]
target = 'Magnitude'


X = data[features]
y = data[target]


imputer = SimpleImputer(strategy='mean')
X = pd.DataFrame(imputer.fit_transform(X), columns=X.columns)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model = LinearRegression()

model.fit(X_train, y_train)


y_pred = model.predict(X_test)


mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

print('Coefficients:', model.coef_)
print('Intercept:', model.intercept_)

"""მაგნიტუდის მისახებად გამოყენებული იყო ფორმულა :
Magnitude=5.88+(0.00052×Latitude)+(0.00012×Longitude)

მიუხედავად იმისა რომ MSE (კვადრატული სხვაობა პროგნოზირებულ და რეალურ სიდიდეებს შორის) პატარა არის ,  ვხედავთ რომ R-squared უარყოფით მნიშვნელობას ღებულობს,რაც იმაზე მიგვითითებს რომ მოდელი კარგად არ მუშაობს მაგნიტუდის დისპერსიის ასახსნელად

"""

from sklearn.tree import DecisionTreeRegressor
import matplotlib.pyplot as plt


features = ['Latitude', 'Longitude', 'Depth']
target = 'Magnitude'

X = data[features]
y = data[target]


X = X.fillna(X.mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = DecisionTreeRegressor(random_state=42)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

"""MSE-სა და   R_SQUARED-ს შორის მსგავის დამოკიდებულება მიგვითითებს  overfitting-ზე ან ისევ მოდელის არასწორობაზე

"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

features = ['Latitude', 'Longitude', 'Depth']
target = 'magnitude_classes'

X = data[features]
y = data[target]


X = X.fillna(X.mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(random_state=42)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('Confusion Matrix:\n', conf_matrix)
print('Classification Report:\n', classification_rep)

from sklearn.tree import DecisionTreeClassifier
features = ['Latitude', 'Longitude', 'Depth', 'Depth Error', 'Horizontal Distance']
target = 'magnitude_classes'

X = data[features]
y = data[target]


X = X.fillna(X.mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = DecisionTreeClassifier(random_state=42)


model.fit(X_train, y_train)


y_pred = model.predict(X_test)


accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('Confusion Matrix:\n', conf_matrix)
print('Classification Report:\n', classification_rep)